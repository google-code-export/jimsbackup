hardlink.py
===========

hardlink
   In computing, a hard link is a directory entry that associates a name with a
   file on a file system. A directory is itself a special kind of file that 
   contains a list of such entries. The term is particular to file systems which
   allow multiple hard links to be created for the same file. This has the 
   effect of creating multiple names for the same file, causing an aliasing 
   effect: if the file is opened by one of its names, and changes are made to 
   its content, then these changes will also be visible when the file is opened 
   by an alternative name. By contrast, a soft link on such filesystems is not a
   link to a file itself, but to a file name; this also creates aliasing, but in
   a different way.  Directories are files, so multiple hard links to 
   directories are possible; however, their unrestricted creation is usually 
   avoided, because of the cyclic structures this may create.  Hard links—that 
   is, multiple hard links to the same file—are supported by POSIX-compliant 
   operating systems, such as Linux, Apple's Mac OS X (see Time Machine), 
   Windows NT4[1] and later Windows NT operating systems.  Support also depends
   on the type of file system being used. For instance, the NTFS file system
   supports it, while FAT does not. (source:  wikipedia)

hardlink
--------

This function takes two paths (a source and a destination) and an optional 
setting to recurse subdirectories if source and dest are directories.

requirements:
 1. Both source and dest should be provided.  Error otherwise.
 2. If source is a directory, dest must be a directory.  Error otherwise.
 3. If source and dest are directories, function does nothing unless recurse
    is set to true.  Issue warning?
 4. If source is a file, dest must be a file.  Error otherwise.
 5. If source and dest are files, recurse is ignored.  Issue warning?
 6. If source does not exist, issue error.
 7. If dest is a file and exists, issue error.
 8. If source is a file and dest is a file and dest doesn't yet exist, dest 
    should be created and it should point to the same file as source.
 9. If source and dest are directories, and files in dest don't exist, all files
    in source should be created in dest and they should point to the same files
	on the filesystem.